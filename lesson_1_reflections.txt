How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    checking typo or other changes that I was not intended to do in my new file

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    if I introduce a bug somewhere in the code, and I run into a regression in my product after a while, I may be interested in check some older version where I'm eventually sure that those code worked fine, at that time

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    I can add notes on major changes performed in file, before committing it on GIT; but it can be a time consuming task, in a frequently changing doc. GIT is more likely for incremental additions, like the one I make in a Java class, or in a HTML form.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Changes in a program code affects more than a file; consider deploying a feature that involves, Model, View, Controller and Constants and Utils files, in your Enterprise applications

How can you use the commands git log and git diff to view the history of files?

    See major changes command and identify easily what I changed commit by commit.

How might using version control make you more confident to make changes that
could break something?

    I am sure I can rollback my changes to a previous working changes

Now that you have your workspace set up, what do you want to try using Git for?

    For versioning